CONSTTK const 2
INTTK int 2
IDENFR a_long_var 2
ASSIGN = 2
INTCON 2 2
MULT * 2
LPARENT ( 2
PLUS + 2
MINU - 2
PLUS + 2
INTCON 1 2
RPARENT ) 2
MINU - 2
INTCON 3 2
MULT * 2
MINU - 2
INTCON 3 2
MINU - 2
PLUS + 2
INTCON 2 2
DIV / 2
MINU - 2
PLUS + 2
MINU - 2
INTCON 1 2
SEMICN ; 2
CONSTTK const 3
INTTK int 3
IDENFR b_long_var 3
ASSIGN = 3
MINU - 3
INTCON 6 3
COMMA , 3
IDENFR c_long_var 3
ASSIGN = 3
PLUS + 3
INTCON 12 3
COMMA , 3
IDENFR d_long_var 3
ASSIGN = 3
PLUS + 3
MINU - 3
PLUS + 3
MINU - 3
PLUS + 3
MINU - 3
INTCON 1001 3
SEMICN ; 3
INTTK int 4
IDENFR StrangeVar 4
ASSIGN = 4
INTCON 5 4
MULT * 4
IDENFR a_long_var 4
PLUS + 4
IDENFR a_long_var 4
MULT * 4
LPARENT ( 4
MINU - 4
INTCON 1 4
MINU - 4
PLUS + 4
INTCON 2 4
RPARENT ) 4
MINU - 4
PLUS + 4
MINU - 4
IDENFR a_long_var 4
MOD % 4
INTCON 2 4
COMMA , 4
IDENFR Very5trangE_var 4
LBRACK [ 4
INTCON 5 4
RBRACK ] 4
ASSIGN = 4
LBRACE { 4
IDENFR a_long_var 4
COMMA , 4
IDENFR b_long_var 4
COMMA , 4
IDENFR c_long_var 4
COMMA , 4
IDENFR d_long_var 4
COMMA , 4
PLUS + 4
INTCON 123 4
RBRACE } 4
SEMICN ; 4
INTTK int 5
IDENFR array2 5
LBRACK [ 5
INTCON 2 5
RBRACK ] 5
LBRACK [ 5
INTCON 3 5
RBRACK ] 5
ASSIGN = 5
LBRACE { 5
LBRACE { 5
IDENFR a_long_var 5
MULT * 5
INTCON 2 5
COMMA , 5
IDENFR b_long_var 5
DIV / 5
INTCON 2 5
COMMA , 5
INTCON 6 5
MOD % 5
INTCON 3 5
RBRACE } 5
COMMA , 5
LBRACE { 5
INTCON 2 5
MINU - 5
INTCON 2 5
MULT * 5
INTCON 3 5
COMMA , 5
INTCON 0 5
COMMA , 5
IDENFR c_long_var 5
MINU - 5
INTCON 3 5
RBRACE } 5
RBRACE } 5
SEMICN ; 5
INTTK int 6
IDENFR templist 6
LBRACK [ 6
INTCON 5 6
RBRACK ] 6
ASSIGN = 6
LBRACE { 6
INTCON 1 6
COMMA , 6
INTCON 2 6
COMMA , 6
INTCON 3 6
COMMA , 6
INTCON 4 6
COMMA , 6
INTCON 5 6
RBRACE } 6
SEMICN ; 6
CONSTTK const 7
INTTK int 7
IDENFR const_array 7
LBRACK [ 7
INTCON 2 7
RBRACK ] 7
LBRACK [ 7
INTCON 2 7
RBRACK ] 7
ASSIGN = 7
LBRACE { 7
LBRACE { 7
INTCON 12 7
COMMA , 7
INTCON 64 7
RBRACE } 7
COMMA , 7
LBRACE { 7
INTCON 114514 7
COMMA , 7
INTCON 1919810 7
RBRACE } 7
RBRACE } 7
COMMA , 7
IDENFR place 7
LBRACK [ 7
INTCON 5 7
RBRACK ] 7
ASSIGN = 7
LBRACE { 7
INTCON 2 7
COMMA , 7
INTCON 3 7
COMMA , 7
INTCON 4 7
COMMA , 7
INTCON 0 7
COMMA , 7
INTCON 1 7
RBRACE } 7
SEMICN ; 7
INTTK int 8
IDENFR t_list 8
LBRACK [ 8
INTCON 1000 8
RBRACK ] 8
COMMA , 8
IDENFR temp 8
COMMA , 8
IDENFR count 8
ASSIGN = 8
INTCON 0 8
SEMICN ; 8
INTTK int 12
IDENFR gcd 12
LPARENT ( 12
INTTK int 12
IDENFR a 12
COMMA , 12
INTTK int 12
IDENFR b 12
RPARENT ) 12
LBRACE { 12
INTTK int 13
IDENFR c 13
SEMICN ; 13
WHILETK while 14
LPARENT ( 14
IDENFR a 14
MOD % 14
IDENFR b 14
NEQ != 14
INTCON 0 14
RPARENT ) 14
LBRACE { 14
IDENFR c 15
ASSIGN = 15
IDENFR a 15
MOD % 15
IDENFR b 15
SEMICN ; 15
IDENFR a 16
ASSIGN = 16
IDENFR b 16
SEMICN ; 16
IDENFR b 16
ASSIGN = 16
IDENFR c 16
SEMICN ; 16
RBRACE } 17
RETURNTK return 18
IDENFR b 18
SEMICN ; 18
RBRACE } 19
VOIDTK void 20
IDENFR doSomething 20
LPARENT ( 20
INTTK int 20
IDENFR in 20
LBRACK [ 20
RBRACK ] 20
LBRACK [ 20
INTCON 1000 20
RBRACK ] 20
RPARENT ) 20
LBRACE { 20
INTTK int 21
IDENFR i 21
ASSIGN = 21
INTCON 0 21
SEMICN ; 21
INTTK int 22
IDENFR t1 22
ASSIGN = 22
IDENFR gcd 22
LPARENT ( 22
IDENFR gcd 22
LPARENT ( 22
IDENFR const_array 22
LBRACK [ 22
INTCON 0 22
RBRACK ] 22
LBRACK [ 22
INTCON 0 22
RBRACK ] 22
COMMA , 22
IDENFR const_array 22
LBRACK [ 22
INTCON 0 22
RBRACK ] 22
LBRACK [ 22
INTCON 1 22
RBRACK ] 22
RPARENT ) 22
COMMA , 22
IDENFR gcd 22
LPARENT ( 22
IDENFR const_array 22
LBRACK [ 22
INTCON 1 22
RBRACK ] 22
LBRACK [ 22
INTCON 0 22
RBRACK ] 22
COMMA , 22
IDENFR const_array 22
LBRACK [ 22
INTCON 1 22
RBRACK ] 22
LBRACK [ 22
INTCON 1 22
RBRACK ] 22
RPARENT ) 22
RPARENT ) 22
SEMICN ; 22
INTTK int 23
IDENFR t2 23
ASSIGN = 23
LPARENT ( 23
IDENFR array2 23
LBRACK [ 23
INTCON 0 23
RBRACK ] 23
LBRACK [ 23
INTCON 0 23
RBRACK ] 23
MINU - 23
IDENFR array2 23
LBRACK [ 23
INTCON 1 23
RBRACK ] 23
LBRACK [ 23
INTCON 0 23
RBRACK ] 23
RPARENT ) 23
MULT * 23
LPARENT ( 23
IDENFR array2 23
LBRACK [ 23
INTCON 0 23
RBRACK ] 23
LBRACK [ 23
INTCON 1 23
RBRACK ] 23
MINU - 23
IDENFR array2 23
LBRACK [ 23
INTCON 1 23
RBRACK ] 23
LBRACK [ 23
INTCON 1 23
RBRACK ] 23
RPARENT ) 23
MULT * 23
LPARENT ( 23
IDENFR array2 23
LBRACK [ 23
INTCON 0 23
RBRACK ] 23
LBRACK [ 23
INTCON 2 23
RBRACK ] 23
MINU - 23
IDENFR array2 23
LBRACK [ 23
INTCON 1 23
RBRACK ] 23
LBRACK [ 23
INTCON 2 23
RBRACK ] 23
RPARENT ) 23
SEMICN ; 23
INTTK int 24
IDENFR t3 24
ASSIGN = 24
IDENFR StrangeVar 24
PLUS + 24
IDENFR Very5trangE_var 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
INTCON 0 24
RBRACK ] 24
RBRACK ] 24
MINU - 24
IDENFR Very5trangE_var 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
INTCON 0 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
PLUS + 24
IDENFR Very5trangE_var 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
INTCON 0 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
MINU - 24
IDENFR Very5trangE_var 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
INTCON 0 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
PLUS + 24
IDENFR Very5trangE_var 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
IDENFR place 24
LBRACK [ 24
INTCON 0 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
RBRACK ] 24
SEMICN ; 24
WHILETK while 25
LPARENT ( 25
IDENFR temp 25
GRE > 25
IDENFR i 25
RPARENT ) 25
LBRACE { 25
IDENFR in 26
LBRACK [ 26
INTCON 1 26
RBRACK ] 26
LBRACK [ 26
IDENFR i 26
RBRACK ] 26
ASSIGN = 26
LPARENT ( 26
IDENFR in 26
LBRACK [ 26
INTCON 0 26
RBRACK ] 26
LBRACK [ 26
IDENFR i 26
RBRACK ] 26
MULT * 26
IDENFR t1 26
MOD % 26
IDENFR t2 26
MINU - 26
IDENFR t3 26
RPARENT ) 26
MULT * 26
IDENFR templist 26
LBRACK [ 26
IDENFR i 26
MOD % 26
INTCON 5 26
RBRACK ] 26
SEMICN ; 26
IDENFR i 27
ASSIGN = 27
IDENFR i 27
PLUS + 27
INTCON 1 27
SEMICN ; 27
RBRACE } 28
RBRACE } 29
VOIDTK void 30
IDENFR resetTemp 30
LPARENT ( 30
RPARENT ) 30
LBRACE { 30
IDENFR temp 31
ASSIGN = 31
INTCON 0 31
SEMICN ; 31
SEMICN ; 31
SEMICN ; 31
SEMICN ; 31
IDENFR temp 32
PLUS + 32
INTCON 1 32
MULT * 32
IDENFR array2 32
LBRACK [ 32
INTCON 2 32
RBRACK ] 32
LBRACK [ 32
INTCON 2 32
RBRACK ] 32
SEMICN ; 32
LBRACE { 33
RBRACE } 33
SEMICN ; 34
LBRACE { 35
SEMICN ; 35
RBRACE } 35
RETURNTK return 36
SEMICN ; 36
RBRACE } 37
VOIDTK void 38
IDENFR setTemp 38
LPARENT ( 38
INTTK int 38
IDENFR t 38
RPARENT ) 38
LBRACE { 38
IDENFR temp 39
ASSIGN = 39
IDENFR t 39
SEMICN ; 39
RBRACE } 44
VOIDTK void 46
IDENFR Sort 46
LPARENT ( 46
INTTK int 46
IDENFR list 46
LBRACK [ 46
RBRACK ] 46
COMMA , 46
INTTK int 46
IDENFR start 46
COMMA , 46
INTTK int 46
IDENFR end 46
RPARENT ) 46
LBRACE { 46
INTTK int 47
IDENFR p 47
COMMA , 47
IDENFR q 47
COMMA , 47
IDENFR mid 47
COMMA , 47
IDENFR i 47
ASSIGN = 47
INTCON 0 47
SEMICN ; 47
IFTK if 48
LPARENT ( 48
IDENFR start 48
EQL == 48
IDENFR end 48
RPARENT ) 48
LBRACE { 48
RETURNTK return 48
SEMICN ; 48
RBRACE } 48
IDENFR mid 49
ASSIGN = 49
IDENFR start 49
PLUS + 49
LPARENT ( 49
IDENFR end 49
MINU - 49
IDENFR start 49
RPARENT ) 49
DIV / 49
INTCON 2 49
SEMICN ; 49
IDENFR Sort 50
LPARENT ( 50
IDENFR list 50
COMMA , 50
IDENFR start 50
COMMA , 50
IDENFR mid 50
RPARENT ) 50
SEMICN ; 50
IDENFR Sort 51
LPARENT ( 51
IDENFR list 51
COMMA , 51
IDENFR mid 51
PLUS + 51
INTCON 1 51
COMMA , 51
IDENFR end 51
RPARENT ) 51
SEMICN ; 51
IDENFR p 52
ASSIGN = 52
IDENFR start 52
SEMICN ; 52
IDENFR q 52
ASSIGN = 52
IDENFR mid 52
PLUS + 52
INTCON 1 52
SEMICN ; 52
WHILETK while 53
LPARENT ( 53
IDENFR p 53
LEQ <= 53
IDENFR mid 53
AND && 53
IDENFR q 53
LEQ <= 53
IDENFR end 53
RPARENT ) 53
LBRACE { 53
IFTK if 54
LPARENT ( 54
IDENFR list 54
LBRACK [ 54
IDENFR p 54
RBRACK ] 54
LSS < 54
IDENFR list 54
LBRACK [ 54
IDENFR q 54
RBRACK ] 54
RPARENT ) 54
LBRACE { 54
IDENFR t_list 55
LBRACK [ 55
IDENFR i 55
RBRACK ] 55
ASSIGN = 55
IDENFR list 55
LBRACK [ 55
IDENFR p 55
RBRACK ] 55
SEMICN ; 55
IDENFR i 56
ASSIGN = 56
IDENFR i 56
PLUS + 56
INTCON 1 56
SEMICN ; 56
IDENFR p 57
ASSIGN = 57
IDENFR p 57
PLUS + 57
INTCON 1 57
SEMICN ; 57
RBRACE } 58
ELSETK else 59
LBRACE { 59
IDENFR t_list 60
LBRACK [ 60
IDENFR i 60
RBRACK ] 60
ASSIGN = 60
IDENFR list 60
LBRACK [ 60
IDENFR q 60
RBRACK ] 60
SEMICN ; 60
IDENFR i 61
ASSIGN = 61
IDENFR i 61
PLUS + 61
INTCON 1 61
SEMICN ; 61
IDENFR q 62
ASSIGN = 62
IDENFR q 62
PLUS + 62
INTCON 1 62
SEMICN ; 62
RBRACE } 63
RBRACE } 64
WHILETK while 65
LPARENT ( 65
IDENFR mid 65
GEQ >= 65
IDENFR p 65
RPARENT ) 65
LBRACE { 65
IDENFR t_list 65
LBRACK [ 65
IDENFR i 65
RBRACK ] 65
ASSIGN = 65
IDENFR list 65
LBRACK [ 65
IDENFR p 65
RBRACK ] 65
SEMICN ; 65
IDENFR i 65
ASSIGN = 65
IDENFR i 65
PLUS + 65
INTCON 1 65
SEMICN ; 65
IDENFR p 65
ASSIGN = 65
IDENFR p 65
PLUS + 65
INTCON 1 65
SEMICN ; 65
RBRACE } 65
WHILETK while 66
LPARENT ( 66
IDENFR end 66
GEQ >= 66
IDENFR q 66
RPARENT ) 66
LBRACE { 66
IDENFR t_list 66
LBRACK [ 66
IDENFR i 66
RBRACK ] 66
ASSIGN = 66
IDENFR list 66
LBRACK [ 66
IDENFR q 66
RBRACK ] 66
SEMICN ; 66
IDENFR i 66
ASSIGN = 66
IDENFR i 66
PLUS + 66
INTCON 1 66
SEMICN ; 66
IDENFR q 66
ASSIGN = 66
IDENFR q 66
PLUS + 66
INTCON 1 66
SEMICN ; 66
RBRACE } 66
WHILETK while 67
LPARENT ( 67
IDENFR i 67
MINU - 67
INTCON 1 67
GEQ >= 67
INTCON 0 67
RPARENT ) 67
LBRACE { 67
IDENFR i 68
ASSIGN = 68
IDENFR i 68
MINU - 68
INTCON 1 68
SEMICN ; 68
IDENFR q 69
ASSIGN = 69
IDENFR q 69
MINU - 69
INTCON 1 69
SEMICN ; 69
IDENFR list 70
LBRACK [ 70
IDENFR q 70
RBRACK ] 70
ASSIGN = 70
IDENFR t_list 70
LBRACK [ 70
IDENFR i 70
RBRACK ] 70
SEMICN ; 70
RBRACE } 71
RBRACE } 72
INTTK int 74
IDENFR iszero 74
LPARENT ( 74
INTTK int 74
IDENFR temp 74
RPARENT ) 74
LBRACE { 74
IFTK if 75
LPARENT ( 75
IDENFR temp 75
RPARENT ) 75
RETURNTK return 76
INTCON 0 76
SEMICN ; 76
RETURNTK return 77
INTCON 1 77
SEMICN ; 77
RBRACE } 78
INTTK int 80
IDENFR active 80
LPARENT ( 80
INTTK int 80
IDENFR in 80
RPARENT ) 80
LBRACE { 80
PRINTFTK printf 81
LPARENT ( 81
STRCON "actived by %d\n" 81
COMMA , 81
IDENFR in 81
RPARENT ) 81
SEMICN ; 81
IDENFR count 82
ASSIGN = 82
IDENFR count 82
PLUS + 82
INTCON 1 82
SEMICN ; 82
RETURNTK return 83
INTCON 1 83
SEMICN ; 83
RBRACE } 84
INTTK int 85
IDENFR trueOrFalse 85
LPARENT ( 85
INTTK int 85
IDENFR in 85
RPARENT ) 85
LBRACE { 85
INTTK int 86
IDENFR a1 86
ASSIGN = 86
IDENFR in 86
MOD % 86
INTCON 2 86
COMMA , 86
IDENFR a2 86
ASSIGN = 86
LPARENT ( 86
IDENFR in 86
DIV / 86
INTCON 2 86
RPARENT ) 86
MOD % 86
INTCON 2 86
COMMA , 86
IDENFR a3 86
ASSIGN = 86
LPARENT ( 86
IDENFR in 86
DIV / 86
INTCON 4 86
RPARENT ) 86
MOD % 86
INTCON 2 86
COMMA , 86
IDENFR a4 86
ASSIGN = 86
LPARENT ( 86
IDENFR in 86
DIV / 86
INTCON 16 86
RPARENT ) 86
MOD % 86
INTCON 2 86
COMMA , 86
IDENFR a5 86
ASSIGN = 86
LPARENT ( 86
IDENFR in 86
DIV / 86
INTCON 32 86
RPARENT ) 86
MOD % 86
INTCON 2 86
COMMA , 86
IDENFR a6 86
ASSIGN = 86
LPARENT ( 86
IDENFR in 86
DIV / 86
INTCON 64 86
RPARENT ) 86
MOD % 86
INTCON 2 86
COMMA , 86
IDENFR a7 86
ASSIGN = 86
LPARENT ( 86
IDENFR in 86
DIV / 86
INTCON 128 86
RPARENT ) 86
MOD % 86
INTCON 2 86
COMMA , 86
IDENFR a8 86
ASSIGN = 86
LPARENT ( 86
IDENFR in 86
DIV / 86
INTCON 256 86
RPARENT ) 86
MOD % 86
INTCON 2 86
SEMICN ; 86
IFTK if 87
LPARENT ( 87
IDENFR a1 87
OR || 87
IDENFR a2 87
EQL == 87
INTCON 0 87
EQL == 87
IDENFR a3 87
AND && 87
IDENFR a4 87
NEQ != 87
IDENFR a5 87
OR || 87
IDENFR a6 87
OR || 87
NOT ! 87
IDENFR a7 87
AND && 87
IDENFR a8 87
RPARENT ) 87
LBRACE { 87
RETURNTK return 88
INTCON 1 88
SEMICN ; 88
RBRACE } 89
RETURNTK return 90
INTCON 0 90
SEMICN ; 90
RBRACE } 91
INTTK int 92
IDENFR trueOrFalse2 92
LPARENT ( 92
INTTK int 92
IDENFR in 92
RPARENT ) 92
LBRACE { 92
INTTK int 93
IDENFR a1 93
ASSIGN = 93
IDENFR in 93
MOD % 93
INTCON 2 93
COMMA , 93
IDENFR a2 93
ASSIGN = 93
LPARENT ( 93
IDENFR in 93
DIV / 93
INTCON 2 93
RPARENT ) 93
MOD % 93
INTCON 2 93
COMMA , 93
IDENFR a3 93
ASSIGN = 93
LPARENT ( 93
IDENFR in 93
DIV / 93
INTCON 4 93
RPARENT ) 93
MOD % 93
INTCON 2 93
COMMA , 93
IDENFR a4 93
ASSIGN = 93
LPARENT ( 93
IDENFR in 93
DIV / 93
INTCON 16 93
RPARENT ) 93
MOD % 93
INTCON 2 93
COMMA , 93
IDENFR a5 93
ASSIGN = 93
LPARENT ( 93
IDENFR in 93
DIV / 93
INTCON 32 93
RPARENT ) 93
MOD % 93
INTCON 2 93
COMMA , 93
IDENFR a6 93
ASSIGN = 93
LPARENT ( 93
IDENFR in 93
DIV / 93
INTCON 64 93
RPARENT ) 93
MOD % 93
INTCON 2 93
COMMA , 93
IDENFR a7 93
ASSIGN = 93
LPARENT ( 93
IDENFR in 93
DIV / 93
INTCON 128 93
RPARENT ) 93
MOD % 93
INTCON 2 93
COMMA , 93
IDENFR a8 93
ASSIGN = 93
LPARENT ( 93
IDENFR in 93
DIV / 93
INTCON 256 93
RPARENT ) 93
MOD % 93
INTCON 2 93
SEMICN ; 93
IFTK if 94
LPARENT ( 94
IDENFR a1 94
AND && 94
IDENFR active 94
LPARENT ( 94
INTCON 1 94
RPARENT ) 94
RPARENT ) 94
LBRACE { 94
IFTK if 95
LPARENT ( 95
IDENFR a2 95
OR || 95
NOT ! 95
IDENFR active 95
LPARENT ( 95
INTCON 2 95
RPARENT ) 95
RPARENT ) 95
LBRACE { 95
IFTK if 96
LPARENT ( 96
NOT ! 96
IDENFR a3 96
OR || 96
IDENFR a4 96
AND && 96
IDENFR a5 96
OR || 96
IDENFR a6 96
AND && 96
IDENFR a7 96
GRE > 96
IDENFR a8 96
RPARENT ) 96
LBRACE { 96
RETURNTK return 97
INTCON 1 97
SEMICN ; 97
RBRACE } 98
RBRACE } 99
RBRACE } 100
RETURNTK return 101
INTCON 0 101
SEMICN ; 101
RBRACE } 102
INTTK int 104
MAINTK main 104
LPARENT ( 104
RPARENT ) 104
LBRACE { 104
INTTK int 105
IDENFR i 105
ASSIGN = 105
INTCON 0 105
SEMICN ; 105
INTTK int 106
IDENFR j 106
ASSIGN = 106
INTCON 0 106
SEMICN ; 106
INTTK int 107
IDENFR list 107
LBRACK [ 107
INTCON 2 107
RBRACK ] 107
LBRACK [ 107
INTCON 1000 107
RBRACK ] 107
SEMICN ; 107
INTTK int 108
IDENFR justfortemp 108
SEMICN ; 108
PRINTFTK printf 109
LPARENT ( 109
STRCON "20373815\n" 109
RPARENT ) 109
SEMICN ; 109
IDENFR resetTemp 110
LPARENT ( 110
RPARENT ) 110
SEMICN ; 110
PRINTFTK printf 111
LPARENT ( 111
STRCON "%d\n" 111
COMMA , 111
IDENFR iszero 111
LPARENT ( 111
IDENFR temp 111
RPARENT ) 111
RPARENT ) 111
SEMICN ; 111
IDENFR justfortemp 112
ASSIGN = 112
GETINTTK getint 112
LPARENT ( 112
RPARENT ) 112
SEMICN ; 112
IDENFR setTemp 113
LPARENT ( 113
IDENFR justfortemp 113
RPARENT ) 113
SEMICN ; 113
LBRACE { 114
INTTK int 115
IDENFR temp 115
ASSIGN = 115
MINU - 115
INTCON 100 115
SEMICN ; 115
PRINTFTK printf 116
LPARENT ( 116
STRCON "%d\n" 116
COMMA , 116
IDENFR temp 116
RPARENT ) 116
SEMICN ; 116
RBRACE } 117
WHILETK while 118
LPARENT ( 118
IDENFR i 118
LSS < 118
IDENFR temp 118
RPARENT ) 118
LBRACE { 118
IDENFR list 119
LBRACK [ 119
INTCON 0 119
RBRACK ] 119
LBRACK [ 119
IDENFR i 119
RBRACK ] 119
ASSIGN = 119
GETINTTK getint 119
LPARENT ( 119
RPARENT ) 119
SEMICN ; 119
IDENFR i 120
ASSIGN = 120
IDENFR i 120
PLUS + 120
INTCON 1 120
SEMICN ; 120
RBRACE } 121
IDENFR Sort 122
LPARENT ( 122
IDENFR list 122
LBRACK [ 122
INTCON 0 122
RBRACK ] 122
COMMA , 122
INTCON 0 122
COMMA , 122
IDENFR temp 122
MINU - 122
INTCON 1 122
RPARENT ) 122
SEMICN ; 122
IDENFR doSomething 123
LPARENT ( 123
IDENFR list 123
RPARENT ) 123
SEMICN ; 123
WHILETK while 124
LPARENT ( 124
INTCON 1 124
RPARENT ) 124
LBRACE { 124
IDENFR i 125
ASSIGN = 125
INTCON 0 125
SEMICN ; 125
WHILETK while 126
LPARENT ( 126
IDENFR i 126
LSS < 126
IDENFR temp 126
RPARENT ) 126
LBRACE { 126
PRINTFTK printf 127
LPARENT ( 127
STRCON "%d " 127
COMMA , 127
IDENFR list 127
LBRACK [ 127
IDENFR j 127
RBRACK ] 127
LBRACK [ 127
IDENFR i 127
RBRACK ] 127
RPARENT ) 127
SEMICN ; 127
IDENFR i 128
ASSIGN = 128
IDENFR i 128
PLUS + 128
INTCON 1 128
SEMICN ; 128
RBRACE } 129
PRINTFTK printf 130
LPARENT ( 130
STRCON "\n" 130
RPARENT ) 130
SEMICN ; 130
IFTK if 131
LPARENT ( 131
IDENFR j 131
EQL == 131
INTCON 0 131
RPARENT ) 131
IDENFR j 132
ASSIGN = 132
INTCON 1 132
SEMICN ; 132
ELSETK else 133
BREAKTK break 134
SEMICN ; 134
RBRACE } 135
IDENFR i 136
ASSIGN = 136
INTCON 0 136
SEMICN ; 136
WHILETK while 137
LPARENT ( 137
IDENFR i 137
LSS < 137
INTCON 64 137
RPARENT ) 137
LBRACE { 137
PRINTFTK printf 138
LPARENT ( 138
STRCON "%d" 138
COMMA , 138
IDENFR trueOrFalse 138
LPARENT ( 138
IDENFR i 138
RPARENT ) 138
RPARENT ) 138
SEMICN ; 138
IDENFR i 139
ASSIGN = 139
IDENFR i 139
PLUS + 139
INTCON 1 139
SEMICN ; 139
RBRACE } 140
PRINTFTK printf 141
LPARENT ( 141
STRCON "\n" 141
RPARENT ) 141
SEMICN ; 141
IDENFR i 142
ASSIGN = 142
INTCON 0 142
SEMICN ; 142
WHILETK while 143
LPARENT ( 143
IDENFR i 143
LSS < 143
INTCON 64 143
RPARENT ) 143
LBRACE { 143
IFTK if 144
LPARENT ( 144
IDENFR trueOrFalse2 144
LPARENT ( 144
IDENFR i 144
RPARENT ) 144
EQL == 144
INTCON 0 144
RPARENT ) 144
LBRACE { 144
IDENFR i 144
ASSIGN = 144
IDENFR i 144
PLUS + 144
INTCON 1 144
SEMICN ; 144
CONTINUETK continue 144
SEMICN ; 144
RBRACE } 144
PRINTFTK printf 145
LPARENT ( 145
STRCON "%d\n" 145
COMMA , 145
IDENFR i 145
RPARENT ) 145
SEMICN ; 145
IDENFR i 146
ASSIGN = 146
IDENFR i 146
PLUS + 146
INTCON 1 146
SEMICN ; 146
RBRACE } 147
PRINTFTK printf 148
LPARENT ( 148
STRCON "Count:%d\n" 148
COMMA , 148
IDENFR count 148
RPARENT ) 148
SEMICN ; 148
RETURNTK return 149
INTCON 0 149
SEMICN ; 149
RBRACE } 150
